# GSE7895_CS_NS_mean_SD <- getMeanSD(GSE7895_expr_matrix, GSE7895_current_smoker_indexes, GSE7895_never_smoker_indexes)
# GSE7895_CS_NS_mean_SD <- cbind(GEO_ID = "GSE7895", GSE7895_CS_NS_mean_SD)
# GSE7895_CS_NS_mean_SD$Gene <- GSE7895_gene_symbol$x
# GSE19027
GSE19027_current_smoker_indexes <- which(GSE19027_sstat_data[1]=="current_smoker")
GSE19027_never_smoker_indexes   <- which(GSE19027_sstat_data[1]=="never_smoker")
GSE19027_CS_NS_mean_SD <- getMeanSD(GSE19027_expr_matrix, GSE19027_current_smoker_indexes, GSE19027_never_smoker_indexes)
GSE19027_CS_NS_mean_SD <- cbind(GEO_ID = "GSE19027", GSE19027_CS_NS_mean_SD)
GSE19027_CS_NS_mean_SD$Gene <- GSE19027_gene_symbol$x
# GSE20257
GSE20257_current_smoker_indexes <- which(GSE20257_sstat_data[1]=="smoker")
GSE20257_never_smoker_indexes   <- which(GSE20257_sstat_data[1]=="non.smoker")
GSE20257_CS_NS_mean_SD <- getMeanSD(GSE20257_expr_matrix, GSE20257_current_smoker_indexes, GSE20257_never_smoker_indexes)
GSE20257_CS_NS_mean_SD <- cbind(GEO_ID = "GSE20257", GSE20257_CS_NS_mean_SD)
GSE20257_CS_NS_mean_SD$Gene <- GSE20257_gene_symbol$x
# GSE63127
# GSE63127_current_smoker_indexes <- which(GSE63127_sstat_data[1]=="smoker")
# GSE63127_never_smoker_indexes   <- which(GSE63127_sstat_data[1]=="non.smoker")
# GSE63127_CS_NS_mean_SD <- getMeanSD(GSE63127_expr_matrix, GSE63127_current_smoker_indexes, GSE63127_never_smoker_indexes)
# GSE63127_CS_NS_mean_SD <- cbind(GEO_ID = "GSE63127", GSE63127_CS_NS_mean_SD)
# GSE63127_CS_NS_mean_SD$Gene <- GSE63127_gene_symbol$x
library(meta)
## Use the persistent linked genes list as the input genes list
gene_list <- LUAD_A1_TE
## Put the dataframes in a list
dataframe_list <- list(GSE4302_CS_NS_mean_SD,
# GSE7895_CS_NS_mean_SD,
# GSE63127_CS_NS_mean_SD,
GSE19027_CS_NS_mean_SD,
GSE20257_CS_NS_mean_SD,
)
library(meta)
## Use the persistent linked genes list as the input genes list
gene_list <- LUAD_A1_TE
## Put the dataframes in a list
dataframe_list <- list(GSE4302_CS_NS_mean_SD,
# GSE7895_CS_NS_mean_SD,
# GSE63127_CS_NS_mean_SD,
GSE19027_CS_NS_mean_SD,
GSE20257_CS_NS_mean_SD
)
# Make a dataframe as a template that will hold the values for each gene as input to SMD calculation
CS_NS_SMD_input_template <- data.frame(
GEO_ID = character(0),
Gene = character(0),
Current_smoker_count = numeric(0),
Current_smoker_mean = numeric(0),
Current_smoker_SD = numeric(0),
Never_smoker_count = numeric(0),
Never_smoker_mean = numeric(0),
Never_smoker_SD = numeric(0)
)
# Make a dataframe that will have all the SMD output values
LUAD_A1_TE_SMD_summary <- data.frame(
GEO_ID = character(0),
gene = character(0),
ID = character(0),
n_obs = numeric(0),
SMD = numeric(0),
CI_95_lower = numeric(0),
CI_95_upper = numeric(0),
z_statistic = numeric(0),
p_value = numeric(0),
method = character(0)
)
# Loop through the list and extract individual genes
for (i in 1:nrow(gene_list)){ # For each gene on the gene list
df_SMD_input <- CS_NS_SMD_input_template # Make a new dataframe for data to input into SMD
for (j in 1:length(dataframe_list)){ # For each dataframe in the list of dataframes
df <- dataframe_list[[j]] # Extract dataframe j
# Append the row with the gene of interest to the SMD input dataframe
df_SMD_input <- rbind(df_SMD_input, df[df$Gene==gene_list[i,]$Gene,])
}
for (k in 1:length(df_SMD_input[,1])){ # For all the GSE values in the input
# Input the resulting df into the SMD calculation function
df_SMD_values <- metacont(Current_smoker_count, Current_smoker_mean, Current_smoker_SD, Never_smoker_count, Never_smoker_mean, Never_smoker_SD, sm="SMD", data = df_SMD_input, subset=k)
# Make a summary of the values
df_SMD_summary <- as.data.frame(t(c(GEO_ID = df_SMD_input[k,1], gene = gene_list$Gene[i], ID = df_SMD_input$ID[k], n_obs = sum(df_SMD_values$n.e, df_SMD_values$n.c), SMD = df_SMD_values$TE, CI_95_lower = df_SMD_values$lower, CI_95_upper =  df_SMD_values$upper, z_stat = df_SMD_values$statistic, p_value = df_SMD_values$pval, method = df_SMD_values$method.smd)))
# Append results from this to the output dataframe
LUAD_A1_TE_SMD_summary <- rbind(LUAD_A1_TE_SMD_summary, df_SMD_summary)
}
}
head(LUAD_A1_TE_SMD_summary)
## Grab all the probe IDs of interest
dataframe_DEGs_list <- list(
GSE4302 = GSE4302_CS_NS_GEO2R_limma_sig,
# GSE63127 = GSE63127_CS_NS_GEO2R_limma_sig,
# GSE7895 = GSE7895_CS_NS_GEO2R_limma_sig,
GSE19027 = GSE19027_CS_NS_GEO2R_limma_sig,
GSE20257 = GSE20257_CS_NS_GEO2R_limma_sig
)
GSE_probeset_gene <- data.frame(GSE = character(0), probeset = character(0), gene = character(0))
## I worked through the logic for this in my head and it is difficult to explain in words
for (i in 1:length(dataframe_DEGs_list)) { # Iterate through all the dataframes of DEGs
df <- dataframe_DEGs_list[[i]]
for (j in 1:nrow(gene_list)){
df_gene_j <- df[df$Gene==gene_list$Gene[j],] # Pull out the rows with gene names in the persistent linked genes list
df_name <- names(dataframe_DEGs_list[i])
if (length(df_gene_j$ID)>0) { # If that row existed in this dataframe
probeset_ID_gene_j <- df_gene_j$ID
gene_j <- df_gene_j$Gene.symbol
GSE_probeset_pair_gene_j <- data.frame(df_name, probeset_ID_gene_j, gene_j)
GSE_probeset_gene <- rbind(GSE_probeset_gene, GSE_probeset_pair_gene_j) # Store the GEO ID, probeset ID, and gene name
}
}
}
colnames(GSE_probeset_gene) <- c("GEO_ID", "ID", "gene")
# Now see if this works for filtering the main list
LUAD_A1_TE_SMD_summary_ID_filter <- LUAD_A1_TE_SMD_summary %>%
semi_join(GSE_probeset_gene, by = c("GEO_ID", "gene", "ID"))
library(meta)
## Use LUAD_A1_TE as the input genes list
gene_list <- LUAD_A1_TE
## Put the dataframes in a list
dataframe_list <- list(
GSE4302 = GSE4302_CS_NS_mean_SD,
# GSE7895 = GSE7895_CS_NS_mean_SD,
# GSE63127 = GSE63127_CS_NS_mean_SD,
GSE19027 = GSE19027_CS_NS_mean_SD,
GSE20257 = GSE20257_CS_NS_mean_SD
)
# Make a dataframe as a template that will hold the values for each gene as input to SMD calculation
CS_NS_SMD_input_template <- data.frame(
GEO_ID = character(0),
Gene = character(0),
Current_smoker_count = numeric(0),
Current_smoker_mean = numeric(0),
Current_smoker_SD = numeric(0),
Never_smoker_count = numeric(0),
Never_smoker_mean = numeric(0),
Never_smoker_SD = numeric(0)
)
# Make a dataframe that will have all the SMD output values
LUAD_A1_TE_SMD_summary_overall <- data.frame(
GEO_ID = character(0),
gene = character(0),
n_obs = numeric(0),
SMD = numeric(0),
CI_95_lower = numeric(0),
CI_95_upper = numeric(0),
z_statistic = numeric(0),
p_value = numeric(0),
method = character(0)
)
# Making this to help filter to the probesets of interest
GSE_probeset_gene_for_join <- GSE_probeset_gene
names(GSE_probeset_gene_for_join)[3] <- "Gene"
# Loop through the list and extract individual genes
for (i in 1:nrow(gene_list)){ # For each gene on the gene list
df_SMD_input <- CS_NS_SMD_input_template # Make a new dataframe for data to input into SMD
for (j in 1:length(dataframe_list)){ # For each dataframe in the list of dataframes
df <- dataframe_list[[j]] # Extract dataframe j
df_gene_j <- df[df$Gene==gene_list[i,]$Gene,]
df_gene_j <- df_gene_j %>%
semi_join(GSE_probeset_gene_for_join, by = c("GEO_ID", "Gene", "ID")) # Filtering to probesets of interest from DEGs
# Append the row with the gene of interest to the SMD input dataframe
df_SMD_input <- rbind(df_SMD_input, df_gene_j)
}
# Input the resulting df into the SMD calculation function
df_SMD_values <- metacont(Current_smoker_count, Current_smoker_mean, Current_smoker_SD, Never_smoker_count, Never_smoker_mean, Never_smoker_SD, sm="SMD", data = df_SMD_input)
# Make a summary of the values
df_SMD_summary_overall <- as.data.frame(t(c(gene = gene_list$Gene[i], n_studies = df_SMD_values$k, n_obs = sum(df_SMD_values$n.e.pooled, df_SMD_values$n.c.pooled), SMD_common= df_SMD_values$TE.common, CI_95_lower_common = df_SMD_values$lower.common, CI_95_upper_common =  df_SMD_values$upper.common, z_stat_common = df_SMD_values$statistic.common, p_value_common = df_SMD_values$pval.common, SMD_random= df_SMD_values$TE.random, CI_95_lower_random = df_SMD_values$lower.random, CI_95_upper_random =  df_SMD_values$upper.random, z_stat_random = df_SMD_values$statistic.random, p_value_random = df_SMD_values$pval.random, method = df_SMD_values$method.smd, Q = df_SMD_values$Q, Q_df = df_SMD_values$df.Q,  Q_pval = df_SMD_values$pval.Q)))
# Append results from this to the output dataframe
LUAD_A1_TE_SMD_summary_overall <- rbind(LUAD_A1_TE_SMD_summary_overall, df_SMD_summary_overall)
}
library(meta)
## Use LUAD_A1_TE as the input genes list
gene_list <- LUAD_A1_TE
## Put the dataframes in a list
dataframe_list <- list(
GSE4302 = GSE4302_CS_NS_mean_SD,
# GSE7895 = GSE7895_CS_NS_mean_SD,
# GSE63127 = GSE63127_CS_NS_mean_SD,
GSE19027 = GSE19027_CS_NS_mean_SD,
GSE20257 = GSE20257_CS_NS_mean_SD
)
# Make a dataframe as a template that will hold the values for each gene as input to SMD calculation
CS_NS_SMD_input_template <- data.frame(
GEO_ID = character(0),
Gene = character(0),
Current_smoker_count = numeric(0),
Current_smoker_mean = numeric(0),
Current_smoker_SD = numeric(0),
Never_smoker_count = numeric(0),
Never_smoker_mean = numeric(0),
Never_smoker_SD = numeric(0)
)
# Make a dataframe that will have all the SMD output values
LUAD_A1_TE_SMD_summary_overall <- data.frame(
GEO_ID = character(0),
gene = character(0),
n_obs = numeric(0),
SMD = numeric(0),
CI_95_lower = numeric(0),
CI_95_upper = numeric(0),
z_statistic = numeric(0),
p_value = numeric(0),
method = character(0)
)
# Making this to help filter to the probesets of interest
GSE_probeset_gene_for_join <- GSE_probeset_gene
names(GSE_probeset_gene_for_join)[3] <- "Gene"
# Loop through the list and extract individual genes
for (i in 1:nrow(gene_list)){ # For each gene on the gene list
df_SMD_input <- CS_NS_SMD_input_template # Make a new dataframe for data to input into SMD
for (j in 1:length(dataframe_list)){ # For each dataframe in the list of dataframes
df <- dataframe_list[[j]] # Extract dataframe j
df_gene_j <- df[df$Gene==gene_list[i,]$Gene,]
df_gene_j <- df_gene_j %>%
semi_join(GSE_probeset_gene_for_join, by = c("GEO_ID", "Gene", "ID")) # Filtering to probesets of interest from DEGs
# Append the row with the gene of interest to the SMD input dataframe
df_SMD_input <- rbind(df_SMD_input, df_gene_j)
}
# Input the resulting df into the SMD calculation function
df_SMD_values <- metacont(Current_smoker_count, Current_smoker_mean, Current_smoker_SD, Never_smoker_count, Never_smoker_mean, Never_smoker_SD, sm="SMD", data = df_SMD_input)
# Make a summary of the values
df_SMD_summary_overall <- as.data.frame(t(c(gene = gene_list$Gene[i], n_studies = df_SMD_values$k, n_obs = sum(df_SMD_values$n.e.pooled, df_SMD_values$n.c.pooled), SMD_common= df_SMD_values$TE.common, CI_95_lower_common = df_SMD_values$lower.common, CI_95_upper_common =  df_SMD_values$upper.common, z_stat_common = df_SMD_values$statistic.common, p_value_common = df_SMD_values$pval.common, SMD_random= df_SMD_values$TE.random, CI_95_lower_random = df_SMD_values$lower.random, CI_95_upper_random =  df_SMD_values$upper.random, z_stat_random = df_SMD_values$statistic.random, p_value_random = df_SMD_values$pval.random, method = df_SMD_values$method.smd, Q = df_SMD_values$Q, Q_df = df_SMD_values$df.Q,  Q_pval = df_SMD_values$pval.Q)))
# Append results from this to the output dataframe
LUAD_A1_TE_SMD_summary_overall <- rbind(LUAD_A1_TE_SMD_summary_overall, df_SMD_summary_overall)
}
dataframe_list
View(dataframe_list)
View(df_SMD_input)
View(df)
View(df_gene_j)
df[df$Gene==gene_list[i,]$Gene,]
df_gene_j %>%
semi_join(GSE_probeset_gene_for_join, by = c("GEO_ID", "Gene", "ID"))
View(gene_list)
i<- 1
df_SMD_input <- CS_NS_SMD_input_template # Make a new dataframe for data to input into SMD
j <- 1
df <- dataframe_list[[j]] # Extract dataframe j
View(df)
df_gene_j <- df[df$Gene==gene_list[i,]$Gene,]
View(df_gene_j)
df_gene_j <- df_gene_j %>%
semi_join(GSE_probeset_gene_for_join, by = c("GEO_ID", "Gene", "ID")) # Filtering to probesets of interest from DEGs
GSE_probeset_gene_for_join
View(GSE_probeset_gene_for_join)
df_gene_j <- df[df$Gene==gene_list[i,]$Gene,]
View(GSE4302_CS_NS_GEO2R_limma_sig)
## Grab all the probe IDs of interest
dataframe_DEGs_list <- list(
GSE4302 = GSE4302_CS_NS_GEO2R_limma_sig,
# GSE63127 = GSE63127_CS_NS_GEO2R_limma_sig,
# GSE7895 = GSE7895_CS_NS_GEO2R_limma_sig,
GSE19027 = GSE19027_CS_NS_GEO2R_limma_sig,
GSE20257 = GSE20257_CS_NS_GEO2R_limma_sig
)
GSE_probeset_gene <- data.frame(GSE = character(0), probeset = character(0), gene = character(0))
## I worked through the logic for this in my head and it is difficult to explain in words
for (i in 1:length(dataframe_DEGs_list)) { # Iterate through all the dataframes of DEGs
df <- dataframe_DEGs_list[[i]]
for (j in 1:nrow(gene_list)){
df_gene_j <- df[df$Gene==gene_list$Gene[j],] # Pull out the rows with gene names in the persistent linked genes list
df_name <- names(dataframe_DEGs_list[i])
if (length(df_gene_j$ID)>0) { # If that row existed in this dataframe
probeset_ID_gene_j <- df_gene_j$ID
gene_j <- df_gene_j$Gene.symbol
GSE_probeset_pair_gene_j <- data.frame(df_name, probeset_ID_gene_j, gene_j)
GSE_probeset_gene <- rbind(GSE_probeset_gene, GSE_probeset_pair_gene_j) # Store the GEO ID, probeset ID, and gene name
}
}
}
colnames(GSE_probeset_gene) <- c("GEO_ID", "ID", "gene")
# Now see if this works for filtering the main list
LUAD_A1_TE_SMD_summary_ID_filter <- LUAD_A1_TE_SMD_summary %>%
semi_join(GSE_probeset_gene, by = c("GEO_ID", "gene", "ID"))
View(LUAD_A1_TE_SMD_summary_ID_filter)
View(GSE_probeset_gene_for_join)
df <- dataframe_list[[j]] # Extract dataframe j
df <- dataframe_list[[j]] # Extract dataframe j
df_gene_j <- df[df$Gene==gene_list[i,]$Gene,]
View(df_gene_j)
i<-1
j<-1
df <- dataframe_list[[j]]
df_gene_j <- df[df$Gene==gene_list[i,]$Gene,]
View(df_gene_j )
View(GSE_probeset_gene_for_join)
View(LUAD_A1_TE_SMD_summary_ID_filter)
View(gene_list)
View(LUAD_A1_TE_SMD_summary)
View(GSE4302_CS_NS_GEO2R_limma_sig)
View(GSE4302_CS_NS_mean_SD)
# Read in LUAD-A1-TE
LUAD_A1_TE <- read.table('../../2_Outputs/4_Linked_genes/LUAD_A1_TE_20250514.txt', header = TRUE)
# Read in LUAD-A1-TE-A2
LUAD_A1_TE_A2 <- read.table('../../2_Outputs/4_Linked_genes/LUAD_A1_TE_A2_20250514.txt', header = TRUE)
# Read in LUSC-A1-TE
LUSC_A1_TE <- read.table('../../2_Outputs/4_Linked_genes/LUSC_A1_TE_20250514.txt', header = TRUE)
# Read in LUSC-A1-TE-A2
LUSC_A1_TE_A2 <- read.table('../../2_Outputs/4_Linked_genes/LUSC_A1_TE_A2_20250514.txt', header = TRUE)
## Read in the tables
GSE4302_CS_NS_GEO2R_limma_sig <- read.table("../../2_Outputs/1_Airway_DEGs/GSE4302_CS_NS_GEO2R_limma_sig_20241114.txt", sep = '\t')
GSE7895_CS_NS_GEO2R_limma_sig <- read.table("../../2_Outputs/1_Airway_DEGs/GSE7895_CS_NS_GEO2R_limma_sig_20241114.txt", sep = '\t')
#GSE14633_CS_NS_GEO2R_limma_sig <- read.table("../2_Outputs/1_Airway_DEGs/GSE14633_CS_NS_GEO2R_limma_sig_20241114.txt", sep = '\t')
#colnames(GSE14633_CS_NS_GEO2R_limma_sig)[2] <- "Gene.symbol" # Rename column for binding
GSE19027_CS_NS_GEO2R_limma_sig <- read.table("../../2_Outputs/1_Airway_DEGs/GSE19027_CS_NS_GEO2R_limma_sig_20241114.txt", sep = '\t')
# For some reason I have to set the column names
# colnames(GSE19027_CS_NS_GEO2R_limma_sig) <- GSE19027_CS_NS_GEO2R_limma_sig[1,]
# GSE19027_CS_NS_GEO2R_limma_sig <- GSE19027_CS_NS_GEO2R_limma_sig[-1,]
GSE20257_CS_NS_GEO2R_limma_sig <- read.table("../../2_Outputs/1_Airway_DEGs/GSE20257_CS_NS_GEO2R_limma_sig_20241114.txt", sep = '\t')
# For some reason I have to set the column names
colnames(GSE20257_CS_NS_GEO2R_limma_sig) <- GSE20257_CS_NS_GEO2R_limma_sig[1,]
GSE20257_CS_NS_GEO2R_limma_sig <- GSE20257_CS_NS_GEO2R_limma_sig[-1,]
GSE63127_CS_NS_GEO2R_limma_sig <- read.table("../../2_Outputs/1_Airway_DEGs/GSE63127_CS_NS_GEO2R_limma_sig_20241115.txt", sep = '\t')
# For some reason I have to set the column names
colnames(GSE63127_CS_NS_GEO2R_limma_sig) <- GSE63127_CS_NS_GEO2R_limma_sig[1,]
GSE63127_CS_NS_GEO2R_limma_sig <- GSE63127_CS_NS_GEO2R_limma_sig[-1,]
## LUAD
LUAD_A1_TE <- readLines("../../2_Outputs/4_Linked_genes/LUAD_A1_TE_genes_20250514.txt")
LUAD_A1_TE_A2 <- readLines("../../2_Outputs/4_Linked_genes/LUAD_A1_TE_A2_genes_20250514.txt")
LUAD_A1_TE_A2_TM <- readLines("../../2_Outputs/4_Linked_genes/LUAD_A1_TE_A2_TM_genes_20250528.txt")
## LUSC
LUSC_A1_TE <- readLines("../../2_Outputs/4_Linked_genes/LUSC_A1_TE_genes_20250514.txt")
LUSC_A1_TE_A2 <- readLines("../../2_Outputs/4_Linked_genes/LUSC_A1_TE_A2_genes_20250514.txt")
LUSC_A1_TE_A2_TM <- readLines("../../2_Outputs/4_Linked_genes/LUSC_A1_TE_A2_TM_genes_20250528.txt")
## Vucic et al 2014 (link to COPD) ##
# Read in table 2 ("Differentially Methylated and Differentially Expressed Genes in Chronic Obstructive Pulmonary Disease Small Airways Previously Associated with Chronic Obstructive Pulmonary Disease")
vucic_2014_table_2 <- read.table("../2_Gene_lists/methylation_airways/24298892/24298892_vucic_2014_table_2", sep = '\t', header = TRUE)
print(c("Genes common to Vucic 2014 known COPD DMG list and LUAD_A1_TE: ", intersect(LUAD_A1_TE, vucic_2014_table_2$Symbol)))
# Nothing here, so no need to go further with LUAD. Check LUSC.
print(c("Genes common to Vucic 2014 known COPD DMG list and LUSC_A1_TE: ", intersect(LUSC_A1_TE, vucic_2014_table_2$Symbol)))
# Nothing here
###
# Read in table 3 ("Differentially Methylated and Expressed Genes Most Likely Under Epigenetic Control in Chronic Obstructive Pulmonary Disease Small Airways")
vucic_2014_table_3 <- read.table("../2_Gene_lists/methylation_airways/24298892/24298892_vucic_2014_table_3", sep = '\t', header = TRUE)
print(c("Genes common to Vucic 2014 COPD-related linked DEG-DMG list and LUAD_A1_TE: ", intersect(LUAD_A1_TE, vucic_2014_table_3$Ref_Seq)))
# Nothing
print(c("Genes common to Vucic 2014 COPD-related linked DEG-DMG  list and LUSC_A1_TE: ", intersect(LUSC_A1_TE, vucic_2014_table_3$Ref_Seq)))
# CYP4F11
# Checking the next layer
print(c("Genes common to Vucic 2014 COPD-related linked DEG-DMG  list and LUSC_A1_TE_A2: ", intersect(LUSC_A1_TE_A2, vucic_2014_table_3$Ref_Seq)))
# Not there
###
## Buro-Auriemma et al 2013 (smoking-related airway methylation changes)##
Buro_2013_25_hypermethylated <- read.table("../2_Gene_lists/methylation_airways/23842454/23842454_Buro_2013_25_hypermethylated.txt")
print(c("Genes common to Buro-Auriemma smoking-related hypermethylated gene list and LUAD_A1_TE:", intersect(LUAD_A1_TE, Buro_2013_25_hypermethylated$V1)))
## 2 hits, checking next layer
print(c("Genes common to Buro-Auriemma smoking-related hypermethylated gene list and LUAD_A1_TE_A2:", intersect(LUAD_A1_TE_A2, Buro_2013_25_hypermethylated$V1)))
# 1 hit, checking next layer
print(c("Genes common to Buro-Auriemma smoking-related hypermethylated gene list and LUAD_A1_TE_A2_TM:", intersect(LUAD_A1_TE_A2_TM, Buro_2013_25_hypermethylated$V1)))
# No hit
print(c("Genes common to Buro-Auriemma smoking-related hypermethylated gene list and LUSC_A1_TE: ", intersect(LUSC_A1_TE, Buro_2013_25_hypermethylated$V1)))
## 2 hits, checking next layer
print(c("Genes common to Buro-Auriemma smoking-related hypermethylated gene list and LUSC_A1_TE_A2: ", intersect(LUSC_A1_TE_A2, Buro_2013_25_hypermethylated$V1)))
# 1 hit, next layer
print(c("Genes common to Buro-Auriemma smoking-related hypermethylated gene list and LUSC_A1_TE_A2_TM: ", intersect(LUSC_A1_TE_A2_TM, Buro_2013_25_hypermethylated$V1)))
# No hits
###
Buro_2013_25_hypomethylated <- read.table("../2_Gene_lists/methylation_airways/23842454/23842454_Buro_2013_25_hypomethylated.txt")
print(c("Genes common to Buro-Auriemma 2013 smoking-related hypomethylated gene list and LUAD_A1_TE:", intersect(LUAD_A1_TE, Buro_2013_25_hypomethylated$V1)))
# 1 hit, next layer
print(c("Genes common to Buro-Auriemma 2013 smoking-related hypomethylated gene list and LUAD_A1_TE_A2:", intersect(LUAD_A1_TE_A2, Buro_2013_25_hypomethylated$V1)))
# No hits
print(c("Genes common to Buro-Auriemma 2013 smoking-related hypomethylated gene list and LUSC_A1_TE:", intersect(LUSC_A1_TE, Buro_2013_25_hypomethylated$V1)))
# 3 hits
print(c("Genes common to Buro-Auriemma 2013 smoking-related hypomethylated gene list and LUSC_A1_TE_A2:", intersect(LUSC_A1_TE_A2, Buro_2013_25_hypomethylated$V1)))
# No hits
# Read in Table 3 from Bosse et al 2012 ("Replicated probe sets upregulated by smoking and not returning to never-smoker levels within 10 years of smoking cessation in the discovery set and validated in at least one of the 2 replication sets")
bosse_2012_table_3 <- read.table("../2_Gene_lists/tumor_adjacent_normal/22659451_bosse_2012_table_3.txt", header = TRUE)
##LUAD_A1_TE
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and the LUAD-A1-TE list:", intersect(LUAD_A1_TE, bosse_2012_table_3$Gene_symbol)))
##LUAD_A1_TE_A2
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and the LUAD-A1-TE-A2 list:", intersect(LUAD_A1_TE_A2, bosse_2012_table_3$Gene_symbol)))
##LUSC_A1_TE
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and LUSC_A1_TE:", intersect(LUSC_A1_TE, bosse_2012_table_3$Gene_symbol)))
##LUSC_A1_TE_A2
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and LUSC_A1_TE_A2:", intersect(LUSC_A1_TE_A2, bosse_2012_table_3$Gene_symbol)))
s
# Read in Table 3 from Bosse et al 2012 ("Replicated probe sets upregulated by smoking and not returning to never-smoker levels within 10 years of smoking cessation in the discovery set and validated in at least one of the 2 replication sets")
bosse_2012_table_3 <- read.table("../2_Gene_lists/tumor_adjacent_normal/22659451_bosse_2012_table_3.txt", header = TRUE)
##LUAD_A1_TE
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and the LUAD-A1-TE list:", intersect(LUAD_A1_TE, bosse_2012_table_3$Gene_symbol)))
##LUAD_A1_TE_A2
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and the LUAD-A1-TE-A2 list:", intersect(LUAD_A1_TE_A2, bosse_2012_table_3$Gene_symbol)))
##LUSC_A1_TE
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and LUSC_A1_TE:", intersect(LUSC_A1_TE, bosse_2012_table_3$Gene_symbol)))
##LUSC_A1_TE_A2
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and LUSC_A1_TE_A2:", intersect(LUSC_A1_TE_A2, bosse_2012_table_3$Gene_symbol)))
# Read in Table 3 from Bosse et al 2012 ("Replicated probe sets upregulated by smoking and not returning to never-smoker levels within 10 years of smoking cessation in the discovery set and validated in at least one of the 2 replication sets")
bosse_2012_table_3 <- read.table("../2_Gene_lists/tumor_adjacent_normal/22659451_bosse_2012_table_3.txt", header = TRUE)
##LUAD_A1_TE
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and the LUAD-A1-TE list:", intersect(LUAD_A1_TE, bosse_2012_table_3$Gene_symbol)))
##LUAD_A1_TE_A2
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and the LUAD-A1-TE-A2 list:", intersect(LUAD_A1_TE_A2, bosse_2012_table_3$Gene_symbol)))
##LUSC_A1_TE
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and LUSC_A1_TE:", intersect(LUSC_A1_TE, bosse_2012_table_3$Gene_symbol)))
##LUSC_A1_TE_A2
print(c("Genes common to Bosse 2012 list of genes persistently upregulated in tumor-adjacent normal tissue 10 years after smoking cessation, and LUSC_A1_TE_A2:", intersect(LUSC_A1_TE_A2, bosse_2012_table_3$Gene_symbol)))
## Chari et al 2007 (Lam lab SAGE study) ##
raj_2007_irreversible_gene_list <- read.table("../2_Gene_lists/irreversible_expression_airways/17727719_raj_2007/17727719_raj_2007_irreversible_gene_list.txt")
colnames(raj_2007_irreversible_gene_list) <- "Gene_Symbol"
##LUAD_A1_TE
print(c("Genes common to Chari 2007 irreversible gene list and LUAD_A1_TE: ", intersect(LUAD_A1_TE, raj_2007_irreversible_gene_list$Gene)))
##LUAD_A1_TE_A2
print(c("Genes common to Chari 2007 irreversible gene list and LUAD_A1_TE_A2: ", intersect(LUAD_A1_TE_A2, raj_2007_irreversible_gene_list$Gene)))
##LUSC_A1_TE
print(c("Genes common to Chari 2007 irreversible gene list and LUSC_A1_TE: ", intersect(LUSC_A1_TE, raj_2007_irreversible_gene_list$Gene)))
##LUSC_A1_TE_A2
print(c("Genes common to Chari 2007 irreversible gene list and LUSC_A1_TE_A2: ", intersect(LUSC_A1_TE_A2, raj_2007_irreversible_gene_list$Gene)))
## Barel et all 2023 (Cornell lab serial sampling study)
barel_2023_irreversible_gene_list <- read.table("../2_Gene_lists/irreversible_expression_airways/37531632_barel_2023 /Table_2_truncated_37531632.txt", header = TRUE)
##LUAD_A1_TE:
print(c("Genes common to Barel 2023 serial sampling irreversible gene list and LUAD_A1_TE: ", intersect(LUAD_A1_TE, barel_2023_irreversible_gene_list$Gene)))
##LUAD_A1_TE_A2:
print(c("Genes common to Barel 2023 serial sampling irreversible gene list and LUAD_A1_TE_A2: ", intersect(LUAD_A1_TE_A2, barel_2023_irreversible_gene_list$Gene)))
##LUSC_A1_TE:
print(c("Genes common to Barel 2023 serial sampling irreversible gene list and LUSC_A1_TE: ", intersect(LUSC_A1_TE, barel_2023_irreversible_gene_list$Gene)))
##LUSC_A1_TE_A2:
print(c("Genes common to Barel 2023 serial sampling irreversible gene list and LUSC_A1_TE_A2: ", intersect(LUSC_A1_TE_A2, barel_2023_irreversible_gene_list$Gene)))
## (For sake of completeness do the reference study later. Also make venn diagrams of this.)
# Read in the tables
31015447_table_1 <- read.table("../../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_1.txt", sep = "\t")
# Read in the tables
table_1_31015447 <- read.table("../../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_1.txt", sep = "\t")
# Read in the tables
table_1_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_1.txt", sep = "\t")
View(table_1_31015447 )
# Read in the tables
table_1_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_1.txt", sep = "\t", header = T)
table_2_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_2.txt", sep = "\t", header = T)
View(table_2_31015447)
library(dplyr)
table_2_31015447_FS_brushings <- table_2_31015447 %>%
filter(SampleType == Brush) %>%
filter(Genomic_Smoking_Status == Former/Never)
table_2_31015447_FS_brushings <- table_2_31015447 %>%
filter(SampleType == "Brush") %>%
filter(Genomic_Smoking_Status == "Former/Never")
View(table_2_31015447_FS_brushings)
table_2_31015447_FS_NS_brushings <- table_2_31015447 %>%
filter(SampleType == "Brush") %>%
filter(Genomic_Smoking_Status == "Former/Never")
table_1_31015447_brushings <- table_1_31015447 %>%
filter(SampleType == "Brush")
View(table_1_31015447_brushings)
View(table_2_31015447_FS_NS_brushings)
table_1_31015447_LUSC_NC_brushings <- table_1_31015447 %>%
filter(SampleType == "Brush") %>%
filter(Previous.LUSC.History == "LC History - LUSC" || "No LC History")
# Filter table 1 to brushings from either no cancer or LUSC
table_1_31015447_LUSC_NC_brushings <- table_1_31015447 %>%
filter(SampleType == "Brush") %>%
filter(Previous.LUSC.History == c("LC History - LUSC","No LC History"))
View(table_1_31015447_LUSC_NC_brushings )
table_3_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3.txt", sep = "\t", header = T)
table_3_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3.txt", sep = "\t", header = T)
table_3_31015447_gene_conversion <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3_gene_conversion.txt", sep = "\t", header = T)
table_3_31015447_gene_conversion <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015477_table_3_gene_conversion.txt", sep = "\t", header = T)
# Read in genes with modules and conversion table
table_3_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3.txt", sep = "\t", header = T)
View(
table_3_31015447_gene_conversion_table)
View(table_3_31015447_gene_conversion_table)
table_3_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3.txt", sep = "\t", header = T)
table_3_31015447_gene_conversion_table <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015477_table_3_gene_conversion.txt", sep = "\t", header = T)
View(table_3_31015447_gene_conversion_table)
table_3_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3.txt", sep = "\t", header = T)
table_3_31015447_gene_conversion_table <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015477_table_3_gene_conversion.txt", sep = "\t", header = T)
table_3_31015447_gene_names <- table_3_31015447 %>%
full_join(table_3_31015447_gene_conversion_table, by = "EnsemblID")
View(table_3_31015447_gene_names)
table_3_31015447_module_8 <- table_3_31015447_gene_names %>%
filter(Gene.Module.Number == 8)
View(table_3_31015447_module_8)
module_8_genes_31015447 <- na.rm(table_3_31015447_module_8$Gene)
module_8_genes_31015447 <- !is.na(table_3_31015447_module_8$Gene)
module_8_genes_31015447
module_8_genes_31015447 <- table_3_31015447_module_8$Gene[!is.na(table_3_31015447_module_8$Gene)]
module_8_genes_31015447
# Read in genes with modules and conversion table
table_3_31015447 <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015447_table_3.txt", sep = "\t", header = T)
table_3_31015447_gene_conversion_table <- read.table("../2_Gene_lists/irreversible_expression_airways/31015447_2019/31015477_table_3_gene_conversion.txt", sep = "\t", header = T)
# Join the ensembl IDs to the matching gene names
table_3_31015447_gene_names <- table_3_31015447 %>%
full_join(table_3_31015447_gene_conversion_table, by = "EnsemblID")
# Select module 8
table_3_31015447_module_8 <- table_3_31015447_gene_names %>%
filter(Gene.Module.Number == 8)
# Get the gene names (removing NA values)
module_8_genes_31015447 <- table_3_31015447_module_8$Gene[!is.na(table_3_31015447_module_8$Gene)]
# Check overlaps with the LUSC lists
##LUSC_A1_TE:
print(c("Genes common to module 8 from 2019 study (PMID 31015447) and LUSC_A1_TE: ", intersect(LUSC_A1_TE, module_8_genes_31015447)))
##LUSC_A1_TE_A2:
print(c("Genes common to Barel 2023 serial sampling irreversible gene list and LUSC_A1_TE_A2: ", intersect(LUSC_A1_TE_A2, module_8_genes_31015447)))
library(eulerr)
LUSC_A1_TE_mod8_31015447_gene_sets <- euler(list("LUAD-A1-TE" = LUSC_A1_TE, "module 8 genes (PMID 31015447)" = module_8_genes_31015447))
plot(main = "Shared genes with module 8 (PMID 31015447)",
LUSC_A1_TE_mod8_31015447_gene_sets,
quantities = TRUE,  # Show counts in regions
fills = c("red", "blue", "green"),
alpha = 0.5,
edges = TRUE)
LUSC_A1_TE_mod8_31015447_gene_sets <- euler(list("LUSC-A1-TE" = LUSC_A1_TE, "module 8 genes (PMID 31015447)" = module_8_genes_31015447))
plot(main = "Shared genes with module 8 (PMID 31015447)",
LUSC_A1_TE_mod8_31015447_gene_sets,
quantities = TRUE,  # Show counts in regions
fills = c("red", "blue", "green"),
alpha = 0.5,
edges = TRUE)
print(c("Genes common to module 8 from 2019 study (PMID 31015447) and LUSC_A1_TE: ", intersect(LUSC_A1_TE, module_8_genes_31015447)))
intersect(LUSC_A1_TE, module_8_genes_31015447))
intersect(LUSC_A1_TE, module_8_genes_31015447)
library(readxl)
install.packages('readxl')
library(readxl)
install.packages("readxl", type = "source")
library(readxl)
