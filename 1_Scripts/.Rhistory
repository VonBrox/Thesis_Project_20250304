## Grabbing vitamin_d values from the columns ##
# Initialize a new column "vitamin_d" with NA values
phenotypic_data$vitamin_d <- NA
# Function to find 'vitamin_d' in a row and return the corresponding value, first instance
find_vitamin_d <- function(row) {
vitamin_d_column <- which(grepl('vitamin', row))
if (length(vitamin_d_column) > 0) {
return(row[vitamin_d_column[1]])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "vitamin_d" column
phenotypic_data$vitamin_d <- apply(phenotypic_data, 1, find_vitamin_d)
## Grabbing cilia values from the columns ##
# Initialize a new column "cilia_length" with NA values
phenotypic_data$cilia_length <- NA
# Function to find 'cilia' in a row and return the corresponding value, first instance
find_cilia <- function(row) {
cilia_column <- which(grepl('cilia', row))
if (length(cilia_column) > 0) {
return(row[cilia_column[1]])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "cilia" column
phenotypic_data$cilia_length <- apply(phenotypic_data, 1, find_cilia)
## Now cut out the messy columns
phenotypic_data <- phenotypic_data[,-c(5:15)]
## Remove unnecessary prefix info
phenotypic_data$ethnicity <- gsub(".*: ", "", phenotypic_data$ethnicity )
phenotypic_data$age <- gsub(".*: ", "", phenotypic_data$age)
phenotypic_data$sex <- gsub(".*: ", "", phenotypic_data$sex)
phenotypic_data$vitamin_d <- gsub(".*: ", "", phenotypic_data$vitamin_d)
phenotypic_data$cilia_length <- gsub(".*: ", "", phenotypic_data$cilia_length)
phenotypic_data$pack_years<- gsub(".*, ", "", phenotypic_data$pack_years)
phenotypic_data$pack_years<- gsub("pack-years", "", phenotypic_data$pack_years)
# Reformat the submission dates to be sortable
phenotypic_data <- phenotypic_data %>%
mutate(submission_date = ifelse(submission_date == "Dec 20 2012", "2012-12-20", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jan 03 2008", "2008-01-08", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jan 31 2013", "2013-01-31", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jun 03 2010", "2010-06-03", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jun 13 2008", "2008-06-13", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "May 17 2007", "2007-05-17", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Nov 08 2013", "2013-11-08", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Nov 10 2014", "2014-11-10", submission_date))
head(phenotypic_data, n = 3)
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Non-smoker","Smoker"))
levels(gs) <- groups
gset$group <- gs
## Plot PCA 1 ##
colz <- as.numeric(as.factor(gs)) # Get color values from group
plotMDS(exprs(gset),
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127",
col = colz,
pch = 1
)
legend("bottom",
legend = c("Smoker", "Non-smoker"),
col = c("#7570B3", "#1B9E77"), # Colors: only for smoking status
pch = c(15, 15),                   # Shapes: 2 = triangle, 1 = circle
pt.cex = c(1, 1),             # Adjust size for better visibility
text.col = "black",                     # Text color
#       bty = "n"
)                              # Box type: 'n' removes border
## We have 4 definite clusters that are not based on smoking status.
## As such, it is a good idea to check the table of sample phenotypic information to look for sources of variation between samples.
pointz <- as.numeric(as.factor(phenotypic_data$submission_date<= "2010-06-03")) # Get point shape values from date of submission: split into 2010 and earlier, post-2010]
## Plot PCA with date information##
plotMDS(exprs(gset),
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127",
col = colz, # Colors smokers red and nonsmokers black
pch = pointz
#labels = gset$group
)
legend("bottom",
legend = c("Smoker", "Non-smoker",
"2010 and Prior", "Post-2010"),
col = c("#7570B3", "#1B9E77", "black", "black"), # Colors: only for smoking status
pch = c(15, 15, 2, 1),                   # Shapes: 2 = triangle, 1 = circle
pt.cex = c(1, 1, 1, 1),             # Adjust size for better visibility
text.col = "black",                     # Text color
#       bty = "n"
)                              # Box type: 'n' removes border
# Clearly the source of batch effect in PC1 is submission date post-2010.
# Note: I found that the split was at 2010 by doing a bit of playing around with other clustering methods, not shown here.
# First batch correction (submission date)
library(sva)
library(limma)
# Making a batch vector
submission_post_2010_batch <- ifelse(phenotypic_data$submission_date < as.Date("2012-01-01"), 1, 2)
# Adjust the expression matrix for submission date batch effect
exprs_matrix_combat <- ComBat(dat=exprs(gset), batch=submission_post_2010_batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
## Plot PCA for expression values after first batch correction ##
date_corrected_PCA <- plotMDS(exprs_matrix_combat,
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127, corrected for submission date",
col = colz, # Colors smokers red and nonsmokers black
pch = pointz
)
legend("bottom",
legend = c("Smoker", "Non-smoker",
"2010 and Prior", "Post-2010"),
col = c("#7570B3", "#1B9E77", "black", "black"), # Colors: only for smoking status
pch = c(15, 15, 2, 1)
#title = "Smoking status"
)
## Some evidence that second source of variation could be due to sex (but only 11/182 samples have sex labels):
plotMDS(exprs_matrix_combat,
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127, corrected for submission date",
col = colz, # Colors smokers red and nonsmokers black
#pch = pointz2 # Using separate shapes for all submission dates
labels = phenotypic_data$sex
)
legend("bottom",
legend = c("Smoker", "Non-smoker", "M = Male", "F = Female"),
col = c("#7570B3", "#1B9E77", "black", "black"),
pch = c(15, 15, NA, NA)
#title = "Smoking status"
)
## Samples are divided by sex, but 11/182 samples is not enough to draw a conclusion here.
## Second correction for unknown source of variation using ComBat: ##
# Assign batch labels based on the first dimension from MDS (equivalent to PC1), since the dividing line for the batches lies at 0
unknown_batch_labels <- ifelse(date_corrected_PCA$x < 0, 1, 2)
# Do a second batch correction
exprs_matrix_combat_2 <- ComBat(dat=exprs_matrix_combat, batch=unknown_batch_labels, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
# View PCA plot
plotMDS(exprs_matrix_combat_2,
gene.selection = "common",
main = "PCA for CS vs NS GSE63127 after second correction",
col = colz, # Colors smokers red and nonsmokers black
pch = pointz
#labels = gset$group
)
legend("topleft",
legend = c("Smoker", "Non-smoker",
"2010 and Prior", "Post-2010"),
col = c("#7570B3", "#1B9E77", "black", "black"), # Colors: only for smoking status
pch = c(15, 15, 2, 1),                   # Shapes: 2 = triangle, 1 = circle
pt.cex = c(1, 1, 1, 1),             # Adjust size for better visibility
text.col = "black",                     # Text color
#       bty = "n"
)
## Now PC1 corresponds quite well to smoking status after the two ComBat corrections.
### 2024/12/13 NOTE: Maybe I should be using SVA as a correction for the unknown source of variation rather than ComBat since this is not really a batch effect?
View(exprs_matrix_combat_2)
# Finish setting up the design matrix
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
## Crucial bit: Replace the expression values in gset with the batch corrected ones ##
exprs(gset) <- as.matrix(exprs_matrix_combat_2)
# calculate precision weights and show plot of mean-variance trend
v <- vooma(gset, design, plot=T)
# OR weights by group
# v <- voomaByGroup(gset, group=groups, design, plot=T, cex=0.1, pch=".", col=1:nlevels(gs))
v$genes <- fData(gset) # attach gene annotations
View(v)
View(v[["E"]])
vooma_expr <- v[["E"]]
vooma_expr$Gene <- fData(gset)
View(vooma_expr)
vooma_expr <- v[["E"]]
class(vooma_expr )
vooma_expr <- as.data.frame(v[["E"]])
vooma_expr$Gene <- fData(gset)
View(vooma_expr)
View(fData(gset)\)
View(fData(gset))
vooma_expr <- as.data.frame(v[["E"]])
vooma_expr$Gene <- fData(gset)$Gene.symbol
vooma_expr <- as.data.frame(v[["E"]])
vooma_expr$Gene <- fData(gset)$Gene.symbol
vooma_expr <- cbind(vooma_expr$Gene, vooma_expr)
vooma_expr <- as.data.frame(v[["E"]])
vooma_expr <- cbind(Gene = fData(gset)$Gene.symbol, vooma_expr)
View(vooma_expr)
write.table(vooma_expr, "../../2_Outputs/2_Airway_expression/A1_exprs_20250403.txt")
write.table(vooma_expr, "../2_Outputs/2_Airway_expression/A1_exprs_20250403.txt")
knitr::opts_chunk$set(echo = TRUE)
A1_exprs <- read.table("../../2_Outputs/2_Airway_expression/A1_exprs_20250403.txt")
A1_exprs <- read.table("../../2_Outputs/2_Airway_expression/A1_exprs_20250403.txt", sep = " ")
View(A1_exprs)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
query <- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
workflow.type = "STAR - Counts")
#GDCdownload(query, directory = "../../GDC_data")
data <- GDCprepare(query, directory = "../../GDC_data")
query_clinical <- GDCquery(
project = "TCGA-LUAD",
data.category = "Clinical",
data.type = "Clinical Supplement"
)
# Check the available files
query_clinical$results[[1]] %>% head()
## I see that some are not BCR XML files, so I will try to remove these
query_clinical$results[[1]] <- query_clinical$results[[1]] %>%
filter(data_format == "BCR XML")
## Download data
#GDCdownload(query_clinical, directory = "../../GDC_data")
clinical_data <- GDCprepare_clinic(query_clinical, clinical.info = "patient", directory = "../../GDC_data")
head(clinical_data)
counts <- as.data.frame(assay(data))  # Extracting the count matrix (these are supposedly raw counts)
#head(counts)  # Viewing the first few rows (genes) and columns (samples)
gene_info <- as.data.frame(rowData(data))
head(gene_info)  # Preview the first few genes and their annotations
sample_info <- as.data.frame(colData(data))
#head(sample_info)  # Preview sample metadata
table(sample_info$sample_type)  # Summarize sample types (Tumor vs. Normal)
# Extract just the normal sample info
sample_info_normal <- sample_info[sample_info$definition=="Solid Tissue Normal",]
# Look for tumor samples with normal matches from same patients
sample_info_tumor <- sample_info %>%
filter(patient %in% sample_info_normal$patient) %>%
filter(definition == "Primary solid Tumor")
# The tumor list is longer -- check out duplicate patient IDs in this list
sample_info_tumor_dups <- sample_info_tumor %>%
group_by(patient) %>%
filter(n() > 1) %>%
ungroup()
unique(sample_info_tumor_dups$patient) # There are 6 patients with multiple tumor samples
sample_info_tumor_dups_FFPE <- sample_info_tumor_dups[sample_info_tumor_dups$is_ffpe,] # OK the difference is the FFPE status.
# It seems these are the only 6 patients in the group who have FFPE samples available.
# I guess I will make the decision to keep the 6 FFPE samples regardless. Not sure if that's the right choice but I'll do it for now.
# Get the non-FFPE duplicate patient sample info
sample_info_tumor_dups_non_FFPE <- sample_info_tumor_dups[!sample_info_tumor_dups$is_ffpe,]
# Remove these IDs from the main tumor sample info
sample_info_tumor <- sample_info_tumor %>% filter(! barcode %in% sample_info_tumor_dups_non_FFPE$barcode)
# There is 1 normal sample with no matching tumor sample it seems, so remove that
sample_info_normal <- sample_info_normal %>% filter(patient != "TCGA-44-6144")
# Make the matched tumor-normal sample table
sample_info_matched_T_NM <- rbind(sample_info_tumor, sample_info_normal)[order(c(seq_len(nrow(sample_info_tumor)), seq_len(nrow(sample_info_normal)))), ]
sample_info_matched_T_NM <- sample_info_matched_T_NM %>%
dplyr::select(-treatments) %>% # Removing treatments column since it is in the form of a list and has no info
arrange(., sample_type_id) %>% # First sort by tumor vs normal
arrange(., patient) # arrange by patient to get the tumor normal pairs
### Remove never smoker samples from the sample info table ###
# A tobacco history label of 1 corresponds to never smokers: https://pmc.ncbi.nlm.nih.gov/articles/PMC7427766/
# Merge the clinical sample table with tobacco smoking history from clinical table and remove never smokers
sample_info_matched_T_NM <- sample_info_matched_T_NM %>%
left_join(., clinical_data %>% select( "bcr_patient_barcode", "tobacco_smoking_history"), by = c("patient"= "bcr_patient_barcode")) %>%
filter(tobacco_smoking_history != 1) #Remove never-smokers
### Modify the counts table for tumor-normal matched data ###
# Keep the counts columns of sample labels that are in the T-NM matched info
sample_barcodes <- as.character(sample_info_matched_T_NM$barcode)
counts_matched_T_NM <- counts %>%
dplyr::select(all_of(sample_barcodes))
# Rename with sample label instead of sample barcode
names(counts_matched_T_NM) <- sample_info_matched_T_NM$sample
# Remove the 1 most obvious outlier and its pair:
# TCGA-38-4626-01A, TCGA-38-4626-11A
counts_matched_T_NM <- counts_matched_T_NM %>% dplyr::select(-c("TCGA-38-4626-01A","TCGA-38-4626-11A"))
## PCA to check for tumor-normal separation with outlier removed
colz2 <- as.numeric(as.factor(rep(c(0,1), length(counts_matched_T_NM)/2))) # Get color values from group
plotMDS(counts_matched_T_NM,
gene.selection = "common",
main = "PCA for TCGA-LUAD expression after outlier removal",
col = colz2,
pch = 1
)
legend("bottomleft",
legend = c("Tumor", "Normal"),
col = colz2, # Colors: only for smoking status
pch = c(15, 15),
text.col = "black"
)
## Saving this version of the T-NM matched counts
#write.table(counts_matched_T_NM, "../2_Outputs/3_Tumor_expression/TCGA_LUAD_counts_matched_T_NM_20241125.txt")
# Get library sizes
library_sizes <- colSums(counts_matched_T_NM)
# Histogram of library sizes
hist(library_sizes, breaks=50, main="Library Size Distribution", xlab="Total Read Counts")
# Boxplot of library sizes
boxplot(library_sizes, main="Library Sizes", ylab="Read Counts")
# Summary statistics
summary(library_sizes)
# Compute summary statistics for gene expression
gene_counts <- rowSums(counts_matched_T_NM > 1)  # Number of samples where gene is expressed (>1 read)
# Histogram of number of samples expressing each gene
hist(gene_counts, breaks=50, main="Gene Detection Across Samples",
xlab="Number of Samples Expressing Gene")
# Summary of gene detection
summary(gene_counts)
# Split by tumor vs normal
group <- rep(c("Tumor","Normal"), length(counts_matched_T_NM)/2)
group_table <- table(group)  # Ensure 'group' is correctly defined
print(group_table)
# Check expression separately in tumor and normal samples
tumor_counts <- rowSums(counts_matched_T_NM[, group == "Tumor"] > 1)
normal_counts <- rowSums(counts_matched_T_NM[, group == "Normal"] > 1)
# Plot side-by-side
par(mfrow=c(1,2))
hist(tumor_counts, breaks=50, main="Tumor Gene Expression", xlab="Number of Tumor Samples")
hist(normal_counts, breaks=50, main="Normal Gene Expression", xlab="Number of Normal Samples")
par(mfrow=c(1,1))
# Create a design matrix
groups <- rep(c("Tumor","Normal"), length(counts_matched_T_NM)/2)
design <- model.matrix(~0 + groups)
# "Condition" should indicate Tumor/Normal status
colnames(design) <- c("Normal", "Tumor")
# Filter out rows meeting minimum parameters by the filterByExpr function
keep <- filterByExpr(counts_matched_T_NM, design = design) # new method
library(edgeR)
# Create a design matrix
groups <- rep(c("Tumor","Normal"), length(counts_matched_T_NM)/2)
design <- model.matrix(~0 + groups)
# "Condition" should indicate Tumor/Normal status
colnames(design) <- c("Normal", "Tumor")
# Filter out rows meeting minimum parameters by the filterByExpr function
keep <- filterByExpr(counts_matched_T_NM, design = design) # new method
# Filter out rows with less than 10 total counts in the smallest sample group size (88/2 = 44)
#keep <- rowSums(counts_matched_T_NM >= 10) >= 44 # old method
counts_matched_T_NM_filtered<- counts_matched_T_NM[keep,]
# Use voom to transform the counts
voom_data <- voom(counts_matched_T_NM_filtered, design)
View(voom_data)
View(voom_data[["E"]])
voom_data <- as.data.frame(voom_data[["E"]])
# Use voom to transform the counts
voom_data <- voom(counts_matched_T_NM_filtered, design)
TE_data <- as.data.frame(voom_data[["E"]])
View(TE_data)
TE_data <- as.data.frame(voom_data[["E"]])
TE_data <- TE_data %>% arrange(., rownames(.))
gene_info_sorted <- gene_info %>%
arrange(., gene_id) %>%
filter(gene_id %in% rownames(TE_data))
View(gene_info_sorted)
TE_data <- as.data.frame(voom_data[["E"]])
TE_data <- TE_data %>% arrange(., rownames(.))
gene_info_sorted <- gene_info %>%
arrange(., gene_id) %>%
filter(gene_id %in% rownames(TE_data))
TE_data <- cbind(gene_info_sorted$gene_name, TE_data)
TE_data <- as.data.frame(voom_data[["E"]])
TE_data <- TE_data %>% arrange(., rownames(.))
gene_info_sorted <- gene_info %>%
arrange(., gene_id) %>%
filter(gene_id %in% rownames(TE_data))
TE_data <- cbind(Gene = gene_info_sorted$gene_name, TE_data)
write.table(TE_data, "../2_Outputs/3_Tumor_expression/TE_data.txt")
write.table(TE_data, "../2_Outputs/3_Tumor_expression/TE_data_20250403.txt")
TE_exprs <- read.table("../2_Outputs/3_Tumor_expression/TE_data_20250403.txt", sep = " ")
TE_exprs <- read.table("../../2_Outputs/3_Tumor_expression/TE_data_20250403.txt", sep = " ")
View(TE_exprs)
View(A1_exprs )
?left_join
left_join
A1_TE_exprs <- inner_join(A1_exprs, TE_exprs, by = "Gene")
View(A1_TE_exprs)
A1_exprs_filtered <- A1_exprs %>%
filter(Gene %in% TE_exprs$Gene)
TE_exprs_filtered <- TE_exprs %>%
filter(Gene %in% A1_exprs$Gene)
A1_exprs_filtered <- A1_exprs %>%
filter(Gene %in% TE_exprs_filtered$Gene)
View(TE_exprs_filtered
)
View(A1_exprs_filtered)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
query <- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
workflow.type = "STAR - Counts")
#GDCdownload(query, directory = "../../GDC_data")
data <- GDCprepare(query, directory = "../../GDC_data")
N = nrow(GSE63127_CS_NS_A1_TE_shared_genes)  # All genes with symbols shared
m <- length(GSE63127_CS_NS_percentile$Gene)   # Airway genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
n <- length(TCGA_LUAD_DEG_percentile$Gene)   # Tumor genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
k <- length(intersect(GSE63127_CS_NS_percentile$Gene, TCGA_LUAD_DEG_percentile$Gene))    # Observed overlap
p_value <- phyper(k - 1, m, N - m, n, lower.tail = FALSE)
p_value
N <- nrow(GSE63127_A1_TE_sig_all)  # All genes with FDR < 0.05 in both airway and tumor
m <- length(GSE63127_CS_NS_percentile$Gene)   # Airway genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
n <- length(TCGA_LUAD_DEG_percentile$Gene)   # Tumor genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
k <- length(intersect(GSE63127_CS_NS_percentile$Gene, TCGA_LUAD_DEG_percentile$Gene))    # Observed overlap
p_value <- phyper(k - 1, m, N - m, n, lower.tail = FALSE)
p_value # About the same as what I got before, extremely significant
#Lies has suggested that I should keep the "gene universe" unchanged in the second case (percentile filter step) because I am testing both fdr and log2FC here. I will try that out.
N = nrow(GSE63127_CS_NS_A1_TE_shared_genes)  # All genes with symbols shared
m <- length(GSE63127_CS_NS_percentile$Gene)   # Airway genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
n <- length(TCGA_LUAD_DEG_percentile$Gene)   # Tumor genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
k <- length(intersect(GSE63127_CS_NS_percentile$Gene, TCGA_LUAD_DEG_percentile$Gene))    # Observed overlap
p_value <- phyper(k - 1, m, N - m, n, lower.tail = FALSE)
p_value
## Given the above thing I want to try this with the superexact test package to se if I actually get a p value
library(SuperExactTest)
# Define gene lists
A1_genes <- GSE63127_CS_NS_percentile$Gene
TE_genes <- TCGA_LUAD_DEG_percentile$Gene
# Universe of genes (e.g., all genes in the study -
# So if we are comparing genes overlapping after the percentile filtering step, we should be using the list from right before that: symbols shared between A1 and TE with FDR < 0.05 in both, therefore with chance of overlap at this next step)
universe <- nrow(GSE63127_CS_NS_A1_TE_shared_genes)
# Create a list of gene sets
gene_sets <- list(A1_genes, TE_genes)
# Perform SuperExactTest
res <- supertest(gene_sets, n = universe)
# Print results
summary(res)
# Summarize results in a more readable format
df_res <- as.data.frame(summary(res)$Table)
library(dplyr)
print("First format them all the same way (this time not filtering for FDR)")
GSE63127_CS_NS_formatted <- GSE63127_CS_NS %>%
dplyr::rename(., Gene = Gene.symbol, FDR_A1 = adj.P.Val, log2FC_A1 = logFC) %>%
dplyr::select(., Gene, FDR_A1, log2FC_A1)
TCGA_LUAD_DEG_formatted<- TCGA_LUAD_DEG %>%
dplyr::rename(., FDR_TE = FDR, log2FC_TE = log2FC, Gene = Gene) %>%
dplyr::select(., Gene, FDR_TE, log2FC_TE)
#####
print("Then filter to shared gene symbols")
GSE63127_CS_NS_A1_TE_shared_genes <- GSE63127_CS_NS_formatted %>%
dplyr::filter(Gene %in% TCGA_LUAD_DEG$Gene)
print("GSE63127_CS_NS_A1_TE_shared_genes:")
nrow(GSE63127_CS_NS_A1_TE_shared_genes)
TCGA_LUAD_DEG_A1_TE_shared_genes <- TCGA_LUAD_DEG_formatted %>%
dplyr::filter(Gene %in% GSE63127_CS_NS$Gene)
print("TCGA_LUAD_DEG_A1_TE_shared_genes:")
nrow(TCGA_LUAD_DEG_A1_TE_shared_genes)
#####
print("Then filter to FDRs individually being <= 0.05")
GSE63127_CS_NS_A1_TE_sig <- GSE63127_CS_NS_A1_TE_shared_genes %>%
filter(FDR_A1 <= 0.05)
print("GSE63127_CS_NS_A1_TE_sig:")
nrow(GSE63127_CS_NS_A1_TE_sig)
TCGA_LUAD_DEG_A1_TE_sig <- TCGA_LUAD_DEG_A1_TE_shared_genes %>%
filter(FDR_TE <= 0.05)
print("TCGA_LUAD_DEG_A1_TE_sig:")
nrow(TCGA_LUAD_DEG_A1_TE_sig)
#####
print("Then filter to FDR < 0.05 in both")
GSE63127_A1_TE_sig_all <- GSE63127_CS_NS_A1_TE_sig %>%
filter(Gene %in% TCGA_LUAD_DEG_A1_TE_sig$Gene)
print("GSE63127_A1_TE_sig_all:")
nrow(GSE63127_A1_TE_sig_all)
TCGA_LUAD_DEG_A1_TE_sig_all <- TCGA_LUAD_DEG_A1_TE_sig %>%
filter(Gene %in% GSE63127_CS_NS_A1_TE_sig$Gene)
print("TCGA_LUAD_DEG_A1_TE_sig_all:")
nrow(TCGA_LUAD_DEG_A1_TE_sig_all)
#####
print("Then filter to n% most up/downregulated genes based on log2FC.")
percentile <- 75
print(paste0(percentile, " percentile"))
##A1:
# Calculate percentile cutoffs
top_cutoff_A1 <- quantile(GSE63127_A1_TE_sig_all$log2FC_A1, 0.5+percentile/100/2, na.rm = TRUE)
bottom_cutoff_A1 <- quantile(GSE63127_A1_TE_sig_all$log2FC_A1, 0.5-percentile/100/2, na.rm = TRUE)
# Filter genes in the top and bottom n% of log2FC
GSE63127_CS_NS_percentile <- GSE63127_A1_TE_sig_all %>%
filter(log2FC_A1 >= top_cutoff_A1 | log2FC_A1 <= bottom_cutoff_A1)
print("GSE63127_CS_NS_percentile:")
nrow(GSE63127_CS_NS_percentile)
## TE
# Calculate percentile cutoffs
top_cutoff_TE <- quantile(TCGA_LUAD_DEG_A1_TE_sig_all$log2FC_TE,  0.5+percentile/100/2, na.rm = TRUE)  # Top n%
bottom_cutoff_TE <- quantile(TCGA_LUAD_DEG_A1_TE_sig_all$log2FC_TE, 0.5-percentile/100/2, na.rm = TRUE)  # Bottom n%
# Filter genes in the top and bottom n% of log2FC
TCGA_LUAD_DEG_percentile <- TCGA_LUAD_DEG_A1_TE_sig_all %>%
filter(log2FC_TE >= top_cutoff_TE | log2FC_TE <= bottom_cutoff_TE)
print("TCGA_LUAD_DEG_percentile:")
nrow(TCGA_LUAD_DEG_percentile)
# Testing the shared FDR < 0.05 filter step
N = nrow(GSE63127_CS_NS_A1_TE_shared_genes)  # All genes with symbols shared
m <- length(GSE63127_CS_NS_A1_TE_sig$Gene)   # Airway genes with FDR < 0.05
n <- length(TCGA_LUAD_DEG_A1_TE_sig$Gene)   # Tumor genes with FDR < 0.05
k <- length(intersect(GSE63127_CS_NS_A1_TE_sig$Gene, TCGA_LUAD_DEG_A1_TE_sig$Gene))    # Observed overlap
p_value <- phyper(k - 1, m, N - m, n, lower.tail = FALSE)
p_value # About the same as what I got before, not at all significant
# Testing the percentile filter step
N <- nrow(GSE63127_A1_TE_sig_all)  # All genes with FDR < 0.05 in both airway and tumor
m <- length(GSE63127_CS_NS_percentile$Gene)   # Airway genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
n <- length(TCGA_LUAD_DEG_percentile$Gene)   # Tumor genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
k <- length(intersect(GSE63127_CS_NS_percentile$Gene, TCGA_LUAD_DEG_percentile$Gene))    # Observed overlap
p_value <- phyper(k - 1, m, N - m, n, lower.tail = FALSE)
p_value # About the same as what I got before, extremely significant
#Lies has suggested that I should keep the "gene universe" unchanged in the second case (percentile filter step) because I am testing both fdr and log2FC here. I will try that out.
N = nrow(GSE63127_CS_NS_A1_TE_shared_genes)  # All genes with symbols shared
m <- length(GSE63127_CS_NS_percentile$Gene)   # Airway genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
n <- length(TCGA_LUAD_DEG_percentile$Gene)   # Tumor genes with FDR < 0.05 in both airway and tumor and top 25% |log2FC|
k <- length(intersect(GSE63127_CS_NS_percentile$Gene, TCGA_LUAD_DEG_percentile$Gene))    # Observed overlap
p_value <- phyper(k - 1, m, N - m, n, lower.tail = FALSE)
p_value # Wow, the p value is so low it registers as zero!
## Given the above thing I want to try this with the superexact test package to se if I actually get a p value
library(SuperExactTest)
# Define gene lists
A1_genes <- GSE63127_CS_NS_percentile$Gene
TE_genes <- TCGA_LUAD_DEG_percentile$Gene
# Universe of genes (e.g., all genes in the study -
# So if we are comparing genes overlapping after the percentile filtering step, we should be using the list from right before that: symbols shared between A1 and TE with FDR < 0.05 in both, therefore with chance of overlap at this next step)
universe <- nrow(GSE63127_CS_NS_A1_TE_shared_genes)
# Create a list of gene sets
gene_sets <- list(A1_genes, TE_genes)
# Perform SuperExactTest
res <- supertest(gene_sets, n = universe)
# Print results
summary(res)
# Summarize results in a more readable format
df_res <- as.data.frame(summary(res)$Table) # Woww, the p value is still zero!
