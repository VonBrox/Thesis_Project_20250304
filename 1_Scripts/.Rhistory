sex_column <- which(grepl('sex', row))
if (length(sex_column) > 0) {
return(row[sex_column])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "sex" column
phenotypic_data$sex <- apply(phenotypic_data, 1, find_sex)
## Grabbing pack_years values from the columns ##
# Initialize a new column "pack_years" with NA values
phenotypic_data$pack_years <- NA
# Function to find 'pack_years' in a row and return the corresponding value, but just the first instance
find_pack_years <- function(row) {
pack_years_column <- which(grepl('pack', row))
if (length(pack_years_column) > 0) {
return(row[pack_years_column[1]])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "pack_years" column
phenotypic_data$pack_years <- apply(phenotypic_data, 1, find_pack_years)
#unlist the column
phenotypic_data$pack_years <- unlist(phenotypic_data$pack_years )
## Grabbing age values from the columns ##
# Initialize a new column "age" with NA values
phenotypic_data$age <- NA
# Function to find 'age' in a row and return the corresponding value
find_age <- function(row) {
age_column <- which(grepl('age', row))
if (length(age_column) > 0) {
return(row[age_column])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "age" column
phenotypic_data$age <- apply(phenotypic_data, 1, find_age)
## Grabbing vitamin_d values from the columns ##
# Initialize a new column "vitamin_d" with NA values
phenotypic_data$vitamin_d <- NA
# Function to find 'vitamin_d' in a row and return the corresponding value, first instance
find_vitamin_d <- function(row) {
vitamin_d_column <- which(grepl('vitamin', row))
if (length(vitamin_d_column) > 0) {
return(row[vitamin_d_column[1]])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "vitamin_d" column
phenotypic_data$vitamin_d <- apply(phenotypic_data, 1, find_vitamin_d)
## Grabbing vitamin_d values from the columns ##
# Initialize a new column "vitamin_d" with NA values
phenotypic_data$vitamin_d <- NA
# Function to find 'vitamin_d' in a row and return the corresponding value, first instance
find_vitamin_d <- function(row) {
vitamin_d_column <- which(grepl('vitamin', row))
if (length(vitamin_d_column) > 0) {
return(row[vitamin_d_column[1]])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "vitamin_d" column
phenotypic_data$vitamin_d <- apply(phenotypic_data, 1, find_vitamin_d)
## Grabbing cilia values from the columns ##
# Initialize a new column "cilia_length" with NA values
phenotypic_data$cilia_length <- NA
# Function to find 'cilia' in a row and return the corresponding value, first instance
find_cilia <- function(row) {
cilia_column <- which(grepl('cilia', row))
if (length(cilia_column) > 0) {
return(row[cilia_column[1]])
} else {
return(NA)
}
}
# Apply the function row-wise to populate the "cilia" column
phenotypic_data$cilia_length <- apply(phenotypic_data, 1, find_cilia)
## Now cut out the messy columns
phenotypic_data <- phenotypic_data[,-c(5:15)]
## Remove unnecessary prefix info
phenotypic_data$ethnicity <- gsub(".*: ", "", phenotypic_data$ethnicity )
phenotypic_data$age <- gsub(".*: ", "", phenotypic_data$age)
phenotypic_data$sex <- gsub(".*: ", "", phenotypic_data$sex)
phenotypic_data$vitamin_d <- gsub(".*: ", "", phenotypic_data$vitamin_d)
phenotypic_data$cilia_length <- gsub(".*: ", "", phenotypic_data$cilia_length)
phenotypic_data$pack_years<- gsub(".*, ", "", phenotypic_data$pack_years)
phenotypic_data$pack_years<- gsub("pack-years", "", phenotypic_data$pack_years)
# Reformat the submission dates to be sortable
phenotypic_data <- phenotypic_data %>%
mutate(submission_date = ifelse(submission_date == "Dec 20 2012", "2012-12-20", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jan 03 2008", "2008-01-08", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jan 31 2013", "2013-01-31", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jun 03 2010", "2010-06-03", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Jun 13 2008", "2008-06-13", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "May 17 2007", "2007-05-17", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Nov 08 2013", "2013-11-08", submission_date)) %>%
mutate(submission_date = ifelse(submission_date == "Nov 10 2014", "2014-11-10", submission_date))
head(phenotypic_data, n = 3)
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Non-smoker","Smoker"))
levels(gs) <- groups
gset$group <- gs
## Plot PCA 1 ##
colz <- as.numeric(as.factor(gs)) # Get color values from group
plotMDS(exprs(gset),
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127",
col = colz,
pch = 1
)
legend("bottom",
legend = c("Smoker", "Non-smoker"),
col = c("#7570B3", "#1B9E77"), # Colors: only for smoking status
pch = c(15, 15),                   # Shapes: 2 = triangle, 1 = circle
pt.cex = c(1, 1),             # Adjust size for better visibility
text.col = "black",                     # Text color
#       bty = "n"
)                              # Box type: 'n' removes border
## We have 4 definite clusters that are not based on smoking status.
## As such, it is a good idea to check the table of sample phenotypic information to look for sources of variation between samples.
pointz <- as.numeric(as.factor(phenotypic_data$submission_date<= "2010-06-03")) # Get point shape values from date of submission: split into 2010 and earlier, post-2010]
## Plot PCA with date information##
plotMDS(exprs(gset),
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127",
col = colz, # Colors smokers red and nonsmokers black
pch = pointz
#labels = gset$group
)
legend("bottom",
legend = c("Smoker", "Non-smoker",
"2010 and Prior", "Post-2010"),
col = c("#7570B3", "#1B9E77", "black", "black"), # Colors: only for smoking status
pch = c(15, 15, 2, 1),                   # Shapes: 2 = triangle, 1 = circle
pt.cex = c(1, 1, 1, 1),             # Adjust size for better visibility
text.col = "black",                     # Text color
#       bty = "n"
)                              # Box type: 'n' removes border
# Clearly the source of batch effect in PC1 is submission date post-2010.
# Note: I found that the split was at 2010 by doing a bit of playing around with other clustering methods, not shown here.
# First batch correction (submission date)
library(sva)
library(limma)
# Making a batch vector
submission_post_2010_batch <- ifelse(phenotypic_data$submission_date < as.Date("2012-01-01"), 1, 2)
# Adjust the expression matrix for submission date batch effect
exprs_matrix_combat <- ComBat(dat=exprs(gset), batch=submission_post_2010_batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
## Plot PCA for expression values after first batch correction ##
date_corrected_PCA <- plotMDS(exprs_matrix_combat,
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127, corrected for submission date",
col = colz, # Colors smokers red and nonsmokers black
pch = pointz
)
legend("bottom",
legend = c("Smoker", "Non-smoker",
"2010 and Prior", "Post-2010"),
col = c("#7570B3", "#1B9E77", "black", "black"), # Colors: only for smoking status
pch = c(15, 15, 2, 1)
#title = "Smoking status"
)
## Some evidence that second source of variation could be due to sex (but only 11/182 samples have sex labels):
plotMDS(exprs_matrix_combat,
gene.selection = "common",
# main = "PCA for CS vs NS GSE63127, corrected for submission date",
col = colz, # Colors smokers red and nonsmokers black
#pch = pointz2 # Using separate shapes for all submission dates
labels = phenotypic_data$sex
)
legend("bottom",
legend = c("Smoker", "Non-smoker", "M = Male", "F = Female"),
col = c("#7570B3", "#1B9E77", "black", "black"),
pch = c(15, 15, NA, NA)
#title = "Smoking status"
)
## Samples are divided by sex, but 11/182 samples is not enough to draw a conclusion here.
## Second correction for unknown source of variation using ComBat: ##
# Assign batch labels based on the first dimension from MDS (equivalent to PC1), since the dividing line for the batches lies at 0
unknown_batch_labels <- ifelse(date_corrected_PCA$x < 0, 1, 2)
# Do a second batch correction
exprs_matrix_combat_2 <- ComBat(dat=exprs_matrix_combat, batch=unknown_batch_labels, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
# View PCA plot
plotMDS(exprs_matrix_combat_2,
gene.selection = "common",
main = "PCA for CS vs NS GSE63127 after second correction",
col = colz, # Colors smokers red and nonsmokers black
pch = pointz
#labels = gset$group
)
legend("topleft",
legend = c("Smoker", "Non-smoker",
"2010 and Prior", "Post-2010"),
col = c("#7570B3", "#1B9E77", "black", "black"), # Colors: only for smoking status
pch = c(15, 15, 2, 1),                   # Shapes: 2 = triangle, 1 = circle
pt.cex = c(1, 1, 1, 1),             # Adjust size for better visibility
text.col = "black",                     # Text color
#       bty = "n"
)
## Now PC1 corresponds quite well to smoking status after the two ComBat corrections.
### 2024/12/13 NOTE: Maybe I should be using SVA as a correction for the unknown source of variation rather than ComBat since this is not really a batch effect?
GSE63127_CS_NS_limma <- tT %>%
filter(Gene.symbol != "") %>% # Remove blank gene symbols
group_by(Gene.symbol) %>%
slice_min(adj.P.Val, with_ties = TRUE) %>%
# For probesets mapping to same gene, keep one with lowest FDR. Keep ties for now to check later.
ungroup()
# Finish setting up the design matrix
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
## Crucial bit: Replace the expression values in gset with the batch corrected ones ##
exprs(gset) <- as.matrix(exprs_matrix_combat_2)
# calculate precision weights and show plot of mean-variance trend
v <- vooma(gset, design, plot=T)
# OR weights by group
# v <- voomaByGroup(gset, group=groups, design, plot=T, cex=0.1, pch=".", col=1:nlevels(gs))
v$genes <- fData(gset) # attach gene annotations
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[2], groups[1], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","Gene.symbol","logFC","adj.P.Val"))
GSE63127_CS_NS_limma <- tT %>%
filter(Gene.symbol != "") %>% # Remove blank gene symbols
group_by(Gene.symbol) %>%
slice_min(adj.P.Val, with_ties = TRUE) %>%
# For probesets mapping to same gene, keep one with lowest FDR. Keep ties for now to check later.
ungroup()
head(GSE63127_CS_NS_limma)
# Checking for ties
ties <- GSE63127_CS_NS_limma %>%
group_by(Gene.symbol) %>%
filter(n() > 1) %>%
ungroup()
print(ties) # No ties
nrow(GSE63127_CS_NS_limma)
library(EnhancedVolcano, verbose = FALSE)
library(GEOquery, verbose = FALSE)
library(limma, verbose = FALSE)
library(umap, verbose = FALSE)
library(dplyr, verbose = FALSE)
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
#   Differential expression analysis with limma
# load series and platform data from GEO (date: 2024/10/15)
gset <- getGEO("GSE63127", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- paste0("X00100011111X00000000000X00000X000000000000X000X00",
"XX00X0XXXXXXXXX1111111111111111111111X111X11111111",
"XXXX1XXXXXXXXXXXXXXXXXXXXXXXX001000000010100111111",
"01110111110011111001110011101011111001110101100011",
"111111111111111111111111111111")
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
gset <- gset[complete.cases(exprs(gset)), ] # skip missing values
length(sml) # 182 samples
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Non-smoker","Smoker"))
levels(gs) <- groups
gset$group <- gs
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
query <- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
workflow.type = "STAR - Counts")
#GDCdownload(query, directory = "../../GDC_data")
data <- GDCprepare(query, directory = "../../GDC_data")
query_clinical <- GDCquery(
project = "TCGA-LUAD",
data.category = "Clinical",
data.type = "Clinical Supplement"
)
# Check the available files
query_clinical$results[[1]] %>% head()
## I see that some are not BCR XML files, so I will try to remove these
query_clinical$results[[1]] <- query_clinical$results[[1]] %>%
filter(data_format == "BCR XML")
## Download data
#GDCdownload(query_clinical, directory = "../../GDC_data")
clinical_data <- GDCprepare_clinic(query_clinical, clinical.info = "patient", directory = "../../GDC_data")
head(clinical_data)
counts <- as.data.frame(assay(data))  # Extracting the count matrix (these are supposedly raw counts)
#head(counts)  # Viewing the first few rows (genes) and columns (samples)
gene_info <- as.data.frame(rowData(data))
head(gene_info)  # Preview the first few genes and their annotations
sample_info <- as.data.frame(colData(data))
#head(sample_info)  # Preview sample metadata
table(sample_info$sample_type)  # Summarize sample types (Tumor vs. Normal)
# Extract just the normal sample info
sample_info_normal <- sample_info[sample_info$definition=="Solid Tissue Normal",]
# Look for tumor samples with normal matches from same patients
sample_info_tumor <- sample_info %>%
filter(patient %in% sample_info_normal$patient) %>%
filter(definition == "Primary solid Tumor")
# The tumor list is longer -- check out duplicate patient IDs in this list
sample_info_tumor_dups <- sample_info_tumor %>%
group_by(patient) %>%
filter(n() > 1) %>%
ungroup()
unique(sample_info_tumor_dups$patient) # There are 6 patients with multiple tumor samples
sample_info_tumor_dups_FFPE <- sample_info_tumor_dups[sample_info_tumor_dups$is_ffpe,] # OK the difference is the FFPE status.
# It seems these are the only 6 patients in the group who have FFPE samples available.
# I guess I will make the decision to keep the 6 FFPE samples regardless. Not sure if that's the right choice but I'll do it for now.
# Get the non-FFPE duplicate patient sample info
sample_info_tumor_dups_non_FFPE <- sample_info_tumor_dups[!sample_info_tumor_dups$is_ffpe,]
# Remove these IDs from the main tumor sample info
sample_info_tumor <- sample_info_tumor %>% filter(! barcode %in% sample_info_tumor_dups_non_FFPE$barcode)
# There is 1 normal sample with no matching tumor sample it seems, so remove that
sample_info_normal <- sample_info_normal %>% filter(patient != "TCGA-44-6144")
# Make the matched tumor-normal sample table
sample_info_matched_T_NM <- rbind(sample_info_tumor, sample_info_normal)[order(c(seq_len(nrow(sample_info_tumor)), seq_len(nrow(sample_info_normal)))), ]
sample_info_matched_T_NM <- sample_info_matched_T_NM %>%
dplyr::select(-treatments) %>% # Removing treatments column since it is in the form of a list and has no info
arrange(., sample_type_id) %>% # First sort by tumor vs normal
arrange(., patient) # arrange by patient to get the tumor normal pairs
### Remove never smoker samples from the sample info table ###
# A tobacco history label of 1 corresponds to never smokers: https://pmc.ncbi.nlm.nih.gov/articles/PMC7427766/
# Merge the clinical sample table with tobacco smoking history from clinical table and remove never smokers
sample_info_matched_T_NM <- sample_info_matched_T_NM %>%
left_join(., clinical_data %>% select( "bcr_patient_barcode", "tobacco_smoking_history"), by = c("patient"= "bcr_patient_barcode")) %>%
filter(tobacco_smoking_history != 1) #Remove never-smokers
### Modify the counts table for tumor-normal matched data ###
# Keep the counts columns of sample labels that are in the T-NM matched info
sample_barcodes <- as.character(sample_info_matched_T_NM$barcode)
counts_matched_T_NM <- counts %>%
dplyr::select(all_of(sample_barcodes))
# Rename with sample label instead of sample barcode
names(counts_matched_T_NM) <- sample_info_matched_T_NM$sample
View(counts_matched_T_NM)
data_methylation_hm450_tumor <- read.table("../../Former_Smokers_Aim_2/1_TCGA_LUAD_multiomics/0_Unpaired_input_tables/data_methylation_hm450.txt", header=TRUE, fill=TRUE)
data_methylation_hm450_normal <- read.table("../../Former_Smokers_Aim_2/1_TCGA_LUAD_multiomics/0_Unpaired_input_tables/data_methylation_hm450_normals.txt", header=TRUE, fill=TRUE)
allIDs_tumor  <- colnames(data_methylation_hm450_tumor)
allIDs_normal <- colnames(data_methylation_hm450_normal)
## 2025/01/29: Remove IDs of never smokers
## Remove suffix from normal IDs and replace . with -
allIDs_normal_patients <- allIDs_normal %>%
gsub("*.11","", .) %>%
gsub("\\.", "-", .)
## Filter the clinical info to those patient IDs without never smokers
clinical_data_filtered <- clinical_data %>%
filter(bcr_patient_barcode %in% allIDs_normal_patients) %>%
filter(tobacco_smoking_history != 1) # Remove never smokers
## Filter out the corresponding IDs from allIDs_normal
allIDs_normal_filtered <- clinical_data_filtered$bcr_patient_barcode%>%
gsub("-","\\.", .) %>%
lapply(., function(x) paste0(x, ".11")) %>%
unlist()
length(allIDs_normal_filtered)
#Listing IDs of tumors that have matched normals by changing the tissue ID to the "tumor" identifier, "01", for matching purposes.
IDs_tumor_with_matches <-gsub("*.11",".01", allIDs_normal_filtered)
length(IDs_tumor_with_matches)
#Make a table of the methylation data for tumor samples only with matching normal data.
data_methylation_hm450_tumor_with_matches <- data_methylation_hm450_tumor %>%
dplyr::select(any_of(IDs_tumor_with_matches))
length(data_methylation_hm450_tumor_with_matches)
#Make a table of the methylation data for normal samples only with matching tumor data.
# Note that 3 of the normal samples don't have a matching tumor sample:
#`TCGA.44.2655.01`, `TCGA.44.2659.01`, and `TCGA.44.2662.01` don't exist.
data_methylation_hm450_normal_with_matches <- data_methylation_hm450_normal %>%
dplyr::select(allIDs_normal_filtered) %>%
dplyr::select(-c('TCGA.44.2655.11', 'TCGA.44.2659.11','TCGA.44.2662.11'))
length(data_methylation_hm450_normal_with_matches)
#Make a combined table of matched tumor-normal samples.
data_methylation_hm450_tumor_normal_matched <- cbind(data_methylation_hm450_tumor_with_matches, data_methylation_hm450_normal_with_matches)[order(c(1:length(data_methylation_hm450_tumor_with_matches),1:length(data_methylation_hm450_normal_with_matches)))]
data_methylation_hm450_tumor_normal_matched <- cbind(Gene = data_methylation_hm450_tumor$Hugo_Symbol, data_methylation_hm450_tumor_normal_matched) # Adding back gene labels
View(data_methylation_hm450_tumor_normal_matched)
knitr::opts_chunk$set(echo = TRUE)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
query <- GDCquery(project = "TCGA-LUSC",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
workflow.type = "STAR - Counts")
#GDCdownload(query, directory = "../../GDC_data")
data <- GDCprepare(query, directory = "../../GDC_data")
query_clinical <- GDCquery(
project = "TCGA-LUSC",
data.category = "Clinical",
data.type = "Clinical Supplement"
)
# Check the available files
query_clinical$results[[1]] %>% head()
## I see that some are not BCR XML files, so I will try to remove these
query_clinical$results[[1]] <- query_clinical$results[[1]] %>%
filter(data_format == "BCR XML")
## Download data
#GDCdownload(query_clinical, directory = "../../GDC_data")
clinical_data <- GDCprepare_clinic(query_clinical, clinical.info = "patient", directory = "../../GDC_data")
head(clinical_data)
counts <- as.data.frame(assay(data))  # Extracting the count matrix (these are supposedly raw counts)
#head(counts)  # Viewing the first few rows (genes) and columns (samples)
gene_info <- as.data.frame(rowData(data))
head(gene_info)  # Preview the first few genes and their annotations
sample_info <- as.data.frame(colData(data))
#head(sample_info)  # Preview sample metadata
table(sample_info$sample_type)  # Summarize sample types (Tumor vs. Normal)
# Extract just the normal sample info
sample_info_normal <- sample_info[sample_info$definition=="Solid Tissue Normal",] %>%
filter (tissue_or_organ_of_origin != "Blood")# Remove the weird leukemia blood sample.
# Look for tumor samples with normal matches from same patients
sample_info_tumor <- sample_info %>%
filter(patient %in% sample_info_normal$patient) %>%
filter(definition == "Primary solid Tumor") %>%
filter (tissue_or_organ_of_origin != "Blood")# Remove the weird leukemia blood sample.
# Make the matched tumor-normal sample table
sample_info_matched_T_NM <- rbind(sample_info_tumor, sample_info_normal)[order(c(seq_len(nrow(sample_info_tumor)), seq_len(nrow(sample_info_normal)))), ]
sample_info_matched_T_NM <- sample_info_matched_T_NM %>%
dplyr::select(-treatments) %>% # Removing treatments column since it is in the form of a list and has no info
arrange(., sample_type_id) %>% # First sort by tumor vs normal
arrange(., patient) # arrange by patient to get the tumor normal pairs
### Remove never smoker samples from the sample info table ###
# A tobacco history label of 1 corresponds to never smokers: https://pmc.ncbi.nlm.nih.gov/articles/PMC7427766/
# Merge the clinical sample table with tobacco smoking history from clinical table and remove never smokers
sample_info_matched_T_NM <- sample_info_matched_T_NM %>%
left_join(., clinical_data %>% select( "bcr_patient_barcode", "tobacco_smoking_history"), by = c("patient"= "bcr_patient_barcode"))
#There are no never-smokers in the cohort (none have smoking status of 1)
### Modify the counts table for tumor-normal matched data ###
# Keep the counts columns of sample labels that are in the T-NM matched info
sample_barcodes <- as.character(sample_info_matched_T_NM$barcode)
counts_matched_T_NM <- counts %>%
dplyr::select(all_of(sample_barcodes))
# Rename with sample label instead of sample barcode
names(counts_matched_T_NM) <- sample_info_matched_T_NM$sample
data_methylation_hm450_tumor <- read.table("../4_TCGA_data/TCGA_LUSC/data_methylation_hm450_LUSC.txt", header=TRUE, fill=TRUE)
data_methylation_hm450_normal <- read.table("../4_TCGA_data/TCGA_LUSC/data_methylation_hm450_normals_LUSC.txt", header=TRUE, fill=TRUE)
allIDs_tumor  <- colnames(data_methylation_hm450_tumor)
allIDs_normal <- colnames(data_methylation_hm450_normal)
## 2025/01/29: Remove never smokers if there are any
## Remove suffix from normal IDs and replace . with -
allIDs_normal_patients <- allIDs_normal %>%
gsub("*.11","", .) %>%
gsub("\\.", "-", .)
## Filter the clinical info to those patient IDs without never smokers
clinical_data_filtered <- clinical_data %>%
filter(bcr_patient_barcode %in% allIDs_normal_patients) %>%
filter(tobacco_smoking_history != 1) # Remove never smokers
## Filter out the corresponding IDs from allIDs_normal
allIDs_normal_filtered <- clinical_data_filtered$bcr_patient_barcode%>%
gsub("-","\\.", .) %>%
lapply(., function(x) paste0(x, ".11")) %>%
unlist()
length(allIDs_normal_filtered)
#Listing IDs of tumors that have matched normals by changing the tissue ID to the "tumor" identifier, "01", for matching purposes.
IDs_tumor_with_matches <-gsub("*.11",".01", allIDs_normal_filtered)
length(IDs_tumor_with_matches)
#Make a table of the methylation data for tumor samples only with matching normal data.
data_methylation_hm450_tumor_with_matches <- data_methylation_hm450_tumor %>%
dplyr::select(any_of(IDs_tumor_with_matches))
length(data_methylation_hm450_tumor_with_matches)
# Somehow I am losing two samples here. Check which samples those are
missing_tumor_samples <- IDs_tumor_with_matches[!IDs_tumor_with_matches %in% colnames(data_methylation_hm450_tumor_with_matches)]
missing_tumor_samples
# OK, I will remove the corresponding normal IDs from the normals
#Make a table of the methylation data for normal samples only with matching tumor data.
data_methylation_hm450_normal_with_matches <- data_methylation_hm450_normal %>%
dplyr::select(allIDs_normal_filtered) %>%
dplyr::select(! c("TCGA.43.3394.11", "TCGA.43.3920.11")) # Remove the samples with no matching tumor sample
length(data_methylation_hm450_normal_with_matches)
# There are still 2 more normals than tumors. Check what doesn't match here.
#Make a combined table of matched tumor-normal samples.
data_methylation_hm450_tumor_normal_matched <- cbind(data_methylation_hm450_tumor_with_matches, data_methylation_hm450_normal_with_matches)[order(c(1:length(data_methylation_hm450_tumor_with_matches),1:length(data_methylation_hm450_normal_with_matches)))]
# Adding back gene labels
data_methylation_hm450_tumor_normal_matched <- cbind(Gene = data_methylation_hm450_tumor$Hugo_Symbol, data_methylation_hm450_tumor_normal_matched)
View(data_methylation_hm450_tumor_normal_matched )
knitr::opts_chunk$set(echo = TRUE)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(survival)
library(survminer)
library(dplyr)
LUAD_A1_TE_A2 <- read.table("../2_Outputs/4_Linked_genes/LUAD_A1_TE_A2_20250514.txt")
query_clinical <- GDCquery(
project = "TCGA-LUAD",
data.category = "Clinical",
data.type = "Clinical Supplement"
)
# Check the available files
query_clinical$results[[1]] %>% head()
## I see that some are not BCR XML files, so I will try to remove these
query_clinical$results[[1]] <- query_clinical$results[[1]] %>%
filter(data_format == "BCR XML")
## Download data
GDCdownload(query_clinical)
clinical_data <- GDCprepare_clinic(query_clinical, clinical.info = "patient")
head(clinical_data)
query <- GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
workflow.type = "STAR - Counts")
